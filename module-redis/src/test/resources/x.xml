<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.minlia.module.registry.v1.domain.Registry">
  <sql id="TABLE_NAME">MDL_Registry</sql>
  <sql id="LIMIT">limit #{pageSize} offset #{offset}</sql>
  <sql id="SELECT_CONDITION_INNER"></sql>
  <resultMap id="ResultMap" type="com.minlia.module.registry.v1.domain.Registry">
    <id property="id" column="id" javaType="java.lang.Long" jdbcType="BIGINT"/>
    <id property="id" column="id" javaType="java.lang.Long" jdbcType="BIGINT"/>
    <result property="category" column="category" javaType="java.lang.String" jdbcType="VARCHAR"/>
    <result property="code" column="code" javaType="java.lang.String" jdbcType="VARCHAR"/>
    <result property="createdBy" column="createdBy" javaType="java.lang.String" jdbcType="VARCHAR"/>
    <result property="createdDate" column="createdDate" javaType="org.threeten.bp.ZonedDateTime"
      jdbcType="TIMESTAMP"
      typeHandler="com.github.javaplugs.mybatis.ThreetenbpZonedDateTimeTypeHandler"/>
    <result property="enabled" column="enabled" javaType="java.lang.Boolean" jdbcType="BIT"/>
    <result property="hasChildren" column="hasChildren" javaType="java.lang.Boolean"
      jdbcType="BIT"/>
    <result property="label" column="label" javaType="java.lang.String" jdbcType="VARCHAR"/>
    <result property="lastModifiedBy" column="lastModifiedBy" javaType="java.lang.String"
      jdbcType="VARCHAR"/>
    <result property="lastModifiedDate" column="lastModifiedDate"
      javaType="org.threeten.bp.ZonedDateTime" jdbcType="TIMESTAMP"
      typeHandler="com.github.javaplugs.mybatis.ThreetenbpZonedDateTimeTypeHandler"/>
    <result property="orders" column="orders" javaType="java.lang.Long" jdbcType="BIGINT"/>
    <association property="parent" javaType="com.minlia.module.registry.v1.domain.Registry">
      <id property="id" column="parent.id" javaType="java.lang.Long" jdbcType="BIGINT"/>
      <id property="id" column="parent.id" javaType="java.lang.Long" jdbcType="BIGINT"/>
      <result property="category" column="parent.category" javaType="java.lang.String"
        jdbcType="VARCHAR"/>
      <result property="code" column="parent.code" javaType="java.lang.String" jdbcType="VARCHAR"/>
      <result property="createdBy" column="parent.createdBy" javaType="java.lang.String"
        jdbcType="VARCHAR"/>
      <result property="createdDate" column="parent.createdDate"
        javaType="org.threeten.bp.ZonedDateTime" jdbcType="TIMESTAMP"
        typeHandler="com.github.javaplugs.mybatis.ThreetenbpZonedDateTimeTypeHandler"/>
      <result property="enabled" column="parent.enabled" javaType="java.lang.Boolean"
        jdbcType="BIT"/>
      <result property="hasChildren" column="parent.hasChildren" javaType="java.lang.Boolean"
        jdbcType="BIT"/>
      <result property="label" column="parent.label" javaType="java.lang.String"
        jdbcType="VARCHAR"/>
      <result property="lastModifiedBy" column="parent.lastModifiedBy" javaType="java.lang.String"
        jdbcType="VARCHAR"/>
      <result property="lastModifiedDate" column="parent.lastModifiedDate"
        javaType="org.threeten.bp.ZonedDateTime" jdbcType="TIMESTAMP"
        typeHandler="com.github.javaplugs.mybatis.ThreetenbpZonedDateTimeTypeHandler"/>
      <result property="orders" column="parent.orders" javaType="java.lang.Long" jdbcType="BIGINT"/>
      <association property="parent" javaType="com.minlia.module.registry.v1.domain.Registry">
        <result property="id" column="parent.parent.id" javaType="java.lang.Long"
          jdbcType="BIGINT"/>
      </association>
    </association>
    <collection property="children" ofType="com.minlia.module.registry.v1.domain.Registry">
      <id property="id" column="children.id" javaType="java.lang.Long" jdbcType="BIGINT"/>
      <id property="id" column="children.id" javaType="java.lang.Long" jdbcType="BIGINT"/>
      <result property="category" column="children.category" javaType="java.lang.String"
        jdbcType="VARCHAR"/>
      <result property="code" column="children.code" javaType="java.lang.String"
        jdbcType="VARCHAR"/>
      <result property="createdBy" column="children.createdBy" javaType="java.lang.String"
        jdbcType="VARCHAR"/>
      <result property="createdDate" column="children.createdDate"
        javaType="org.threeten.bp.ZonedDateTime" jdbcType="TIMESTAMP"
        typeHandler="com.github.javaplugs.mybatis.ThreetenbpZonedDateTimeTypeHandler"/>
      <result property="enabled" column="children.enabled" javaType="java.lang.Boolean"
        jdbcType="BIT"/>
      <result property="hasChildren" column="children.hasChildren" javaType="java.lang.Boolean"
        jdbcType="BIT"/>
      <result property="label" column="children.label" javaType="java.lang.String"
        jdbcType="VARCHAR"/>
      <result property="lastModifiedBy" column="children.lastModifiedBy" javaType="java.lang.String"
        jdbcType="VARCHAR"/>
      <result property="lastModifiedDate" column="children.lastModifiedDate"
        javaType="org.threeten.bp.ZonedDateTime" jdbcType="TIMESTAMP"
        typeHandler="com.github.javaplugs.mybatis.ThreetenbpZonedDateTimeTypeHandler"/>
      <result property="orders" column="children.orders" javaType="java.lang.Long"
        jdbcType="BIGINT"/>
    </collection>
  </resultMap>
  <insert id="_insert" parameterType="com.minlia.module.registry.v1.domain.Registry" lang="XML"
    keyProperty="id" keyColumn="id"><selectKey keyProperty="id" resultType="java.lang.Long"
    order="AFTER">select last_insert_id()</selectKey>
    <![CDATA[insert into MDL_Registry(category,code,created_by,created_date,enabled,has_children,label,last_modified_by,last_modified_date,orders,MDL_Registry_id) values(#{category,jdbcType=VARCHAR},#{code,jdbcType=VARCHAR},#{createdBy,jdbcType=VARCHAR},#{createdDate,jdbcType=TIMESTAMP,typeHandler=com.github.javaplugs.mybatis.ThreetenbpZonedDateTimeTypeHandler},#{enabled,jdbcType=BIT},#{hasChildren,jdbcType=BIT},#{label,jdbcType=VARCHAR},#{lastModifiedBy,jdbcType=VARCHAR},#{lastModifiedDate,jdbcType=TIMESTAMP,typeHandler=com.github.javaplugs.mybatis.ThreetenbpZonedDateTimeTypeHandler},#{orders,jdbcType=BIGINT},#{parent.id,jdbcType=BIGINT})]]>
  </insert>
  <update id="_update" parameterType="com.minlia.module.registry.v1.domain.Registry" lang="XML">
    update MDL_Registry
    <set>
      category=#{category,jdbcType=VARCHAR},code=#{code,jdbcType=VARCHAR},created_date=#{createdDate,jdbcType=TIMESTAMP,typeHandler=com.github.javaplugs.mybatis.ThreetenbpZonedDateTimeTypeHandler},enabled=#{enabled,jdbcType=BIT},has_children=#{hasChildren,jdbcType=BIT},label=#{label,jdbcType=VARCHAR},last_modified_by=#{lastModifiedBy,jdbcType=VARCHAR},last_modified_date=#{lastModifiedDate,jdbcType=TIMESTAMP,typeHandler=com.github.javaplugs.mybatis.ThreetenbpZonedDateTimeTypeHandler},orders=#{orders,jdbcType=BIGINT},MDL_Registry_id=#{parent.id}
    </set>
    <trim prefix="where" prefixOverrides="and |or ">and id=#{id}</trim>
  </update>
  <update id="_updateIgnoreNull" parameterType="com.minlia.module.registry.v1.domain.Registry"
    lang="XML">update MDL_Registry
    <set>
      <if test="category != null">category=#{category,jdbcType=VARCHAR},</if>
      <if test="code != null">code=#{code,jdbcType=VARCHAR},</if>
      <if test="createdDate != null">
        created_date=#{createdDate,jdbcType=TIMESTAMP,typeHandler=com.github.javaplugs.mybatis.ThreetenbpZonedDateTimeTypeHandler},
      </if>
      <if test="enabled != null">enabled=#{enabled,jdbcType=BIT},</if>
      <if test="hasChildren != null">has_children=#{hasChildren,jdbcType=BIT},</if>
      <if test="label != null">label=#{label,jdbcType=VARCHAR},</if>
      <if test="lastModifiedBy != null">last_modified_by=#{lastModifiedBy,jdbcType=VARCHAR},</if>
      <if test="lastModifiedDate != null">
        last_modified_date=#{lastModifiedDate,jdbcType=TIMESTAMP,typeHandler=com.github.javaplugs.mybatis.ThreetenbpZonedDateTimeTypeHandler},
      </if>
      <if test="orders != null">orders=#{orders,jdbcType=BIGINT},</if>
      <if test="parent != null and parent.id != null">MDL_Registry_id=#{parent.id},</if>
    </set>
    <trim prefix="where" prefixOverrides="and |or ">and id=#{id}</trim>
  </update>
  <select id="_getById" parameterType="com.minlia.module.registry.v1.domain.Registry"
    resultMap="ResultMap" lang="XML">select `registry`.id as `id`,`registry`.id as
    `id`,`registry`.category as `category`,`registry`.code as `code`,`registry`.created_by as
    `createdBy`,`registry`.created_date as `createdDate`,`registry`.enabled as
    `enabled`,`registry`.has_children as `hasChildren`,`registry`.label as
    `label`,`registry`.last_modified_by as `lastModifiedBy`,`registry`.last_modified_date as
    `lastModifiedDate`,`registry`.orders as `orders`,`registry.parent`.id as
    `parent.id`,`registry.parent`.id as `parent.id`,`registry.parent`.category as
    `parent.category`,`registry.parent`.code as `parent.code`,`registry.parent`.created_by as
    `parent.createdBy`,`registry.parent`.created_date as
    `parent.createdDate`,`registry.parent`.enabled as
    `parent.enabled`,`registry.parent`.has_children as `parent.hasChildren`,`registry.parent`.label
    as `parent.label`,`registry.parent`.last_modified_by as
    `parent.lastModifiedBy`,`registry.parent`.last_modified_date as
    `parent.lastModifiedDate`,`registry.parent`.orders as
    `parent.orders`,`registry.parent`.MDL_Registry_id as `parent.parent.id`,`registry.children`.id
    as `children.id`,`registry.children`.id as `children.id`,`registry.children`.category as
    `children.category`,`registry.children`.code as `children.code`,`registry.children`.created_by
    as `children.createdBy`,`registry.children`.created_date as
    `children.createdDate`,`registry.children`.enabled as
    `children.enabled`,`registry.children`.has_children as
    `children.hasChildren`,`registry.children`.label as
    `children.label`,`registry.children`.last_modified_by as
    `children.lastModifiedBy`,`registry.children`.last_modified_date as
    `children.lastModifiedDate`,`registry.children`.orders as
    `children.orders`,`registry.children`.MDL_Registry_id as `children.parent.id` from MDL_Registry
    `registry` left outer join MDL_Registry `registry.parent` on
    `registry`.MDL_Registry_id=`registry.parent`.id left outer join MDL_Registry `registry.children`
    on `registry`.id=`registry.children`.MDL_Registry_id
    <trim prefix=" where " prefixOverrides="and |or ">and `registry`.id=#{id}</trim>
  </select>
  <select id="_findAll" resultMap="ResultMap" lang="XML">select `registry`.id as `id`,`registry`.id
    as `id`,`registry`.category as `category`,`registry`.code as `code`,`registry`.created_by as
    `createdBy`,`registry`.created_date as `createdDate`,`registry`.enabled as
    `enabled`,`registry`.has_children as `hasChildren`,`registry`.label as
    `label`,`registry`.last_modified_by as `lastModifiedBy`,`registry`.last_modified_date as
    `lastModifiedDate`,`registry`.orders as `orders`,`registry.parent`.id as
    `parent.id`,`registry.parent`.id as `parent.id`,`registry.parent`.category as
    `parent.category`,`registry.parent`.code as `parent.code`,`registry.parent`.created_by as
    `parent.createdBy`,`registry.parent`.created_date as
    `parent.createdDate`,`registry.parent`.enabled as
    `parent.enabled`,`registry.parent`.has_children as `parent.hasChildren`,`registry.parent`.label
    as `parent.label`,`registry.parent`.last_modified_by as
    `parent.lastModifiedBy`,`registry.parent`.last_modified_date as
    `parent.lastModifiedDate`,`registry.parent`.orders as
    `parent.orders`,`registry.parent`.MDL_Registry_id as `parent.parent.id`,`registry.children`.id
    as `children.id`,`registry.children`.id as `children.id`,`registry.children`.category as
    `children.category`,`registry.children`.code as `children.code`,`registry.children`.created_by
    as `children.createdBy`,`registry.children`.created_date as
    `children.createdDate`,`registry.children`.enabled as
    `children.enabled`,`registry.children`.has_children as
    `children.hasChildren`,`registry.children`.label as
    `children.label`,`registry.children`.last_modified_by as
    `children.lastModifiedBy`,`registry.children`.last_modified_date as
    `children.lastModifiedDate`,`registry.children`.orders as
    `children.orders`,`registry.children`.MDL_Registry_id as `children.parent.id` from MDL_Registry
    `registry` left outer join MDL_Registry `registry.parent` on
    `registry`.MDL_Registry_id=`registry.parent`.id left outer join MDL_Registry `registry.children`
    on `registry`.id=`registry.children`.MDL_Registry_id
    <if test="_condition != null">
      <trim prefix=" where " prefixOverrides="and |or ">${_sqlConditionDsf}
        <include refid="SELECT_CONDITION_INNER"/>
      </trim>
    </if>
    <if test="_ids != null">where `registry`.id in
      <foreach item="item" index="index" collection="_ids" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="_sorts != null">
      <bind name="_columnsMap"
        value='#{"id":"`registry`.id","id":"`registry`.id","category":"`registry`.category","code":"`registry`.code","createdBy":"`registry`.created_by","createdDate":"`registry`.created_date","enabled":"`registry`.enabled","hasChildren":"`registry`.has_children","label":"`registry`.label","lastModifiedBy":"`registry`.last_modified_by","lastModifiedDate":"`registry`.last_modified_date","orders":"`registry`.orders","parent.id":"`registry.parent`.id","parent.id":"`registry.parent`.id","parent.category":"`registry.parent`.category","parent.code":"`registry.parent`.code","parent.createdBy":"`registry.parent`.created_by","parent.createdDate":"`registry.parent`.created_date","parent.enabled":"`registry.parent`.enabled","parent.hasChildren":"`registry.parent`.has_children","parent.label":"`registry.parent`.label","parent.lastModifiedBy":"`registry.parent`.last_modified_by","parent.lastModifiedDate":"`registry.parent`.last_modified_date","parent.orders":"`registry.parent`.orders","parent.parent.id":"`registry.parent`.MDL_Registry_id","children.id":"`registry.children`.id","children.id":"`registry.children`.id","children.category":"`registry.children`.category","children.code":"`registry.children`.code","children.createdBy":"`registry.children`.created_by","children.createdDate":"`registry.children`.created_date","children.enabled":"`registry.children`.enabled","children.hasChildren":"`registry.children`.has_children","children.label":"`registry.children`.label","children.lastModifiedBy":"`registry.children`.last_modified_by","children.lastModifiedDate":"`registry.children`.last_modified_date","children.orders":"`registry.children`.orders","children.parent.id":"`registry.children`.MDL_Registry_id"}'/>
      order by
      <foreach item="item" index="idx" collection="_sorts" open="" separator="," close=""><if
        test="item.ignoreCase">lower(</if>${_columnsMap[item.property]}<if test="item.ignoreCase">
        )
      </if> ${item.direction}
      </foreach>
    </if>
  </select>
  <select id="_findBasicAll" resultMap="ResultMap" lang="XML">select `registry`.id as
    `id`,`registry`.id as `id`,`registry`.category as `category`,`registry`.code as
    `code`,`registry`.created_by as `createdBy`,`registry`.created_date as
    `createdDate`,`registry`.enabled as `enabled`,`registry`.has_children as
    `hasChildren`,`registry`.label as `label`,`registry`.last_modified_by as
    `lastModifiedBy`,`registry`.last_modified_date as `lastModifiedDate`,`registry`.orders as
    `orders`,`registry`.MDL_Registry_id as `parent.id` from MDL_Registry `registry`
    <if test="_condition != null">
      <trim prefix=" where " prefixOverrides="and |or ">${_sqlConditionDsf}
        <include refid="SELECT_CONDITION_INNER"/>
      </trim>
    </if>
    <if test="_ids != null">where `registry`.id in
      <foreach item="item" index="index" collection="_ids" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="_sorts != null">
      <bind name="_columnsMap"
        value='#{"id":"`registry`.id","id":"`registry`.id","category":"`registry`.category","code":"`registry`.code","createdBy":"`registry`.created_by","createdDate":"`registry`.created_date","enabled":"`registry`.enabled","hasChildren":"`registry`.has_children","label":"`registry`.label","lastModifiedBy":"`registry`.last_modified_by","lastModifiedDate":"`registry`.last_modified_date","orders":"`registry`.orders","parent.id":"`registry`.MDL_Registry_id"}'/>
      order by
      <foreach item="item" index="idx" collection="_sorts" open="" separator="," close=""><if
        test="item.ignoreCase">lower(</if>${_columnsMap[item.property]}<if test="item.ignoreCase">
        )
      </if> ${item.direction}
      </foreach>
    </if>
  </select>
  <select id="_count" resultType="long"
    lang="XML">select count(*) from MDL_Registry `registry`</select>
  <delete id="_deleteById" parameterType="com.minlia.module.registry.v1.domain.Registry" lang="XML">
    delete `registry` from MDL_Registry `registry`
    <trim prefix=" where " prefixOverrides="and |or ">and id=#{id}</trim>
  </delete>
  <delete id="_deleteAll">truncate table MDL_Registry </delete>
  <select id="_findByPageable" resultMap="ResultMap" lang="XML">select `registry`.id as
    `id`,`registry`.id as `id`,`registry`.category as `category`,`registry`.code as
    `code`,`registry`.created_by as `createdBy`,`registry`.created_date as
    `createdDate`,`registry`.enabled as `enabled`,`registry`.has_children as
    `hasChildren`,`registry`.label as `label`,`registry`.last_modified_by as
    `lastModifiedBy`,`registry`.last_modified_date as `lastModifiedDate`,`registry`.orders as
    `orders`,`registry.parent`.id as `parent.id`,`registry.parent`.id as
    `parent.id`,`registry.parent`.category as `parent.category`,`registry.parent`.code as
    `parent.code`,`registry.parent`.created_by as `parent.createdBy`,`registry.parent`.created_date
    as `parent.createdDate`,`registry.parent`.enabled as
    `parent.enabled`,`registry.parent`.has_children as `parent.hasChildren`,`registry.parent`.label
    as `parent.label`,`registry.parent`.last_modified_by as
    `parent.lastModifiedBy`,`registry.parent`.last_modified_date as
    `parent.lastModifiedDate`,`registry.parent`.orders as
    `parent.orders`,`registry.parent`.MDL_Registry_id as `parent.parent.id`,`registry.children`.id
    as `children.id`,`registry.children`.id as `children.id`,`registry.children`.category as
    `children.category`,`registry.children`.code as `children.code`,`registry.children`.created_by
    as `children.createdBy`,`registry.children`.created_date as
    `children.createdDate`,`registry.children`.enabled as
    `children.enabled`,`registry.children`.has_children as
    `children.hasChildren`,`registry.children`.label as
    `children.label`,`registry.children`.last_modified_by as
    `children.lastModifiedBy`,`registry.children`.last_modified_date as
    `children.lastModifiedDate`,`registry.children`.orders as
    `children.orders`,`registry.children`.MDL_Registry_id as `children.parent.id` from MDL_Registry
    `registry` left outer join MDL_Registry `registry.parent` on
    `registry`.MDL_Registry_id=`registry.parent`.id left outer join MDL_Registry `registry.children`
    on `registry`.id=`registry.children`.MDL_Registry_id
    <if test="_condition != null">
      <trim prefix=" where " prefixOverrides="and |or ">${_sqlConditionDsf}
        <include refid="SELECT_CONDITION_INNER"/>
      </trim>
    </if>
    <if test="_sorts != null">
      <bind name="_columnsMap"
        value='#{"id":"`registry`.id","id":"`registry`.id","category":"`registry`.category","code":"`registry`.code","createdBy":"`registry`.created_by","createdDate":"`registry`.created_date","enabled":"`registry`.enabled","hasChildren":"`registry`.has_children","label":"`registry`.label","lastModifiedBy":"`registry`.last_modified_by","lastModifiedDate":"`registry`.last_modified_date","orders":"`registry`.orders","parent.id":"`registry.parent`.id","parent.id":"`registry.parent`.id","parent.category":"`registry.parent`.category","parent.code":"`registry.parent`.code","parent.createdBy":"`registry.parent`.created_by","parent.createdDate":"`registry.parent`.created_date","parent.enabled":"`registry.parent`.enabled","parent.hasChildren":"`registry.parent`.has_children","parent.label":"`registry.parent`.label","parent.lastModifiedBy":"`registry.parent`.last_modified_by","parent.lastModifiedDate":"`registry.parent`.last_modified_date","parent.orders":"`registry.parent`.orders","parent.parent.id":"`registry.parent`.MDL_Registry_id","children.id":"`registry.children`.id","children.id":"`registry.children`.id","children.category":"`registry.children`.category","children.code":"`registry.children`.code","children.createdBy":"`registry.children`.created_by","children.createdDate":"`registry.children`.created_date","children.enabled":"`registry.children`.enabled","children.hasChildren":"`registry.children`.has_children","children.label":"`registry.children`.label","children.lastModifiedBy":"`registry.children`.last_modified_by","children.lastModifiedDate":"`registry.children`.last_modified_date","children.orders":"`registry.children`.orders","children.parent.id":"`registry.children`.MDL_Registry_id"}'/>
      order by
      <foreach item="item" index="idx" collection="_sorts" open="" separator="," close=""><if
        test="item.ignoreCase">lower(</if>${_columnsMap[item.property]}<if test="item.ignoreCase">
        )
      </if> ${item.direction}
      </foreach>
    </if>
    limit #{pageSize} offset #{offset}
  </select>
  <select id="_findBasicByPageable" resultMap="ResultMap" lang="XML">select `registry`.id as
    `id`,`registry`.id as `id`,`registry`.category as `category`,`registry`.code as
    `code`,`registry`.created_by as `createdBy`,`registry`.created_date as
    `createdDate`,`registry`.enabled as `enabled`,`registry`.has_children as
    `hasChildren`,`registry`.label as `label`,`registry`.last_modified_by as
    `lastModifiedBy`,`registry`.last_modified_date as `lastModifiedDate`,`registry`.orders as
    `orders`,`registry`.MDL_Registry_id as `parent.id` from MDL_Registry `registry`
    <if test="_condition != null">
      <trim prefix=" where " prefixOverrides="and |or ">${_sqlConditionDsf}
        <include refid="SELECT_CONDITION_INNER"/>
      </trim>
    </if>
    <if test="_sorts != null">
      <bind name="_columnsMap"
        value='#{"id":"`registry`.id","id":"`registry`.id","category":"`registry`.category","code":"`registry`.code","createdBy":"`registry`.created_by","createdDate":"`registry`.created_date","enabled":"`registry`.enabled","hasChildren":"`registry`.has_children","label":"`registry`.label","lastModifiedBy":"`registry`.last_modified_by","lastModifiedDate":"`registry`.last_modified_date","orders":"`registry`.orders","parent.id":"`registry`.MDL_Registry_id"}'/>
      order by
      <foreach item="item" index="idx" collection="_sorts" open="" separator="," close=""><if
        test="item.ignoreCase">lower(</if>${_columnsMap[item.property]}<if test="item.ignoreCase">
        )
      </if> ${item.direction}
      </foreach>
    </if>
    limit #{pageSize} offset #{offset}
  </select>
  <select id="_countByCondition" resultType="long" lang="XML">select count(*) from MDL_Registry
    `registry` left outer join MDL_Registry `registry.parent` on
    `registry`.MDL_Registry_id=`registry.parent`.id left outer join MDL_Registry `registry.children`
    on `registry`.id=`registry.children`.MDL_Registry_id
    <if test="_condition != null">
      <trim prefix=" where " prefixOverrides="and |or ">${_sqlConditionDsf}
        <include refid="SELECT_CONDITION_INNER"/>
      </trim>
    </if>
  </select>
  <select id="_countBasicByCondition" resultType="long" lang="XML">select count(*) from MDL_Registry
    `registry`
    <if test="_condition != null">
      <trim prefix=" where " prefixOverrides="and |or ">${_sqlConditionDsf}
        <include refid="SELECT_CONDITION_INNER"/>
      </trim>
    </if>
  </select>
  <select id="_getBasicById" parameterType="com.minlia.module.registry.v1.domain.Registry"
    resultMap="ResultMap" lang="XML">select `registry`.id as `id`,`registry`.id as
    `id`,`registry`.category as `category`,`registry`.code as `code`,`registry`.created_by as
    `createdBy`,`registry`.created_date as `createdDate`,`registry`.enabled as
    `enabled`,`registry`.has_children as `hasChildren`,`registry`.label as
    `label`,`registry`.last_modified_by as `lastModifiedBy`,`registry`.last_modified_date as
    `lastModifiedDate`,`registry`.orders as `orders`,`registry`.MDL_Registry_id as `parent.id` from
    MDL_Registry `registry`
    <trim prefix=" where " prefixOverrides="and |or ">and `registry`.id=#{id}</trim>
  </select>
  <delete id="_deleteByCondition" lang="XML">delete `registry` from MDL_Registry `registry`
    <if test="_condition != null">
      <trim prefix=" where " prefixOverrides="and |or ">${_sqlConditionDsf}
        <include refid="SELECT_CONDITION_INNER"/>
      </trim>
    </if>
  </delete>
</mapper>